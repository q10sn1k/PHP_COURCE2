<?php
    // for
    // 1 2 3 4 5 6 7 8 9 10
    // $i++ - тоже самое, что и $i = $i + 1
    for ($i = 1; $i < 11; $i++) {
        echo $i . ' ';
    }
    echo '<br>';
    // 1-2-3-4-5-6-7-8-9-10-
    for ($i = 1; $i < 11; $i++) {
        echo $i . '-'; //1-2-3-4-5-6-7-8-9-10-
    }

    echo '<br>';

    // 1-2-3-4-5-6-7-8-9-10
    for ($i = 1; $i < 11; $i++) {
        if ($i < 10){
            echo $i . '-'; // 1-2-3-4-5-6-7-8-9-
        } else{
            echo $i; // 10
        }
    }

    echo '<br>';

    // 1-2-3-4-5-6-7-8-9-10
    for ($i = 1; $i <= 10; $i++) {
        if ($i < 10){
            echo $i . '-'; // 1-2-3-4-5-6-7-8-9-
        } else{
            echo $i; // 10
        }
    }

    echo '<br>';

    //____________________________________________________________________
    // массивы
    $arr = [
      'элемент',
      'elem',
      5555,
      7777
    ];

    // распечатаем массив
    print_r($arr);

    echo '<br>';

    foreach ($arr as $item){
        echo $item . ' ';
    }

    /*
        Если ключи в массиве не указаны явно, то по умолчанию нумерация в массиве
        начинается с нуля

        $arr = [
          0 => 'элемент', // 0 - key (ключ), 'элемент' - value (значение)
          1 => 'elem',  // 1 - key (ключ), 'элемент' - value (значение)
          2 => 5555,    // 2 - key (ключ), 'элемент' - value (значение)
          3 => 7777 // 3 - key (ключ), 'элемент' - value (значение)
        ];
     */

    // Задача вывести через echo  elem из массива $arr

    echo '<br>'; // перенос строки

    echo $arr[1]; // вывод 1 элемента массива $arr


    /*
        ключи указаны явно
        $arr = [
          'первый' => 'элемент', // 0 - key (ключ), 'элемент' - value (значение)
          'тест' => 'elem',  // 1 - key (ключ), 'элемент' - value (значение)
          6 => 5555,    // 2 - key (ключ), 'элемент' - value (значение)
          9 => 7777 // 3 - key (ключ), 'элемент' - value (значение)
        ];

        Задача: вывести через echo  elem из массива $arr
        echo $arr['тест']; // elem
     */

    echo '<br>';
    // ____________________________________________________________________________
    // многомерные массивы

    $arr1 = [
        1,
        2,
        6,
        [1, 2, '=-)', 45, 6],
        20
    ];

    // Задача вывести через echo =-)

    /*
        $arr1 = [
            0 => 1,
            1 => 2,
            2 => 6,
            3 => [1, 2, '=-)', 45, 6],
            4 => 20
        ];
     */
    echo $arr1[3][2]; // =-)

    $arr2 = [
        1,
        'elem',
        [1, 2, 3, 4, 5],
        'next elem',
        [
            [1, 2, 3, 5, 10],
            'next elem',
            [
                'str',
                'elem',
                [
                    1,
                    [1, 5, '=-)'],
                    'test'
                ]
            ]
        ]
    ];
    
    /*
         из массива $arr2 выведем =-)
    
    
        Если ключи в массиве не указаны явно, то нумерация начинается с нуля
    
        $arr2 = [
            0 => 1,
            1 =>'elem',
            2 => [1, 2, 3, 4, 5],
            3 => 'next elem',
            4 => [
                    [1, 2, 3, 5, 10],
                    'next elem',
                    [
                        'str',
                        'elem',
                        [
                            1,
                            [1, 5, '=-)'],
                            'test'
                        ]
                    ]
                ]
        ];
    
        нужный нам элемент находится в 4-м ключе (key),
        поэтому при выводе укажем его индекс
    
        echo $arr2[4]
    
        далее расматриваем массив $arr2[4] 
    
        4 => [
                    0 => [1, 2, 3, 5, 10],
                    1 => 'next elem',
                    2 => [
                            'str',
                            'elem',
                            [
                                1,
                                [1, 5, '=-)'],
                                'test'
                            ]
                        ]
                ]
    
        нужный нам элемент находится во 2-м ключе массива $arr2[4], поэтому при
        выводе указываем его индекс

        echo $arr2[4][2]

        далее рассматриваем массив $arr2[4][2]

        [
                            0 => 'str',
                            1 => 'elem',
                            2 => [
                                    1,
                                    [1, 5, '=-)'],
                                    'test'
                                ]
                        ]

        нужный нам элемент находится во 2-м ключе массива $arr2[4][2], поэтому при
        выводе указываем его индекс

        echo $arr2[4][2][2]

        далее рассматриваем $arr2[4][2][2]

        [
                                   0 => 1,
                                   1 =>  [1, 5, '=-)'],
                                   2 => 'test'
                                ]

        нужный нам элемент находится во 1-м ключе массива $arr2[4][2][2] , поэтому при
        выводе указываем его индекс

        echo $arr2[4][2][2][1]

        далее рассматриваем массив $arr2[4][2][2][1]

        [0 =>1, 1 => 5, 2 => '=-)']

        нужный нам элемент находится во 2-м ключе массива $arr2[4][2][2][1] , поэтому при
        выводе указываем его индекс

        echo $arr2[4][2][2][1][2]; // =-)

     */
        echo '<br>';
        echo $arr2[4][2][2][1][2];

        echo '<br>';

        // _____________________________________________________________________
        // Функции
        /*
            Объявление функций начинается с ключевого слова function
            Далее указывается имя функции. Пример: test.
            Затем идут ()
            В () могут быть аргументы функции, а могут и не быть.
            Пример: ($a, $b) - есть аргументы функции
                    () - нет аргументов функции

            После идут {} в которых распологается код выполнения функции

            function FunctionName() {
                // код выполнения функции
            }
         */

        function test($a, $b){
            if ($a == $b){
                $res = "$a и $b равны";
                return $res;
            } else {
                $res = $a . ' и ' . $b . ' не равны';
                return $res;
            }
        }

        /*
            return - возвращает значение функции;
            после выполнения return код в фигурных скобках расположенный после не выполнятся
         */

        // протестируем нашу функцию
        $test1 = test(2,2);
        $test2 = test(2,3);
        echo "$test1 .................... $test2";

        /*
            $a = 7;
            echo "$a"; // 7

            в двойные кавычки - "...." мы можем подставлять переменные
            и на выходе получим значение подставленных переменных
            Пример: "$a и $b равны"


            в одинарных кавычках если мы в строку передадим переменную,
            то вместо значения переменной мы получим текст
            echo '$a'; // $a

            Поэтому, если мы хотим получить значение переменной,
            в случае с одинарными кавычками следует использовать
            конкатенацию (объединение строк)
            Пример: $a . ' и ' . $b . ' не равны'
            ________________________________________________________________
            $a = 1;
            $b = 2;

            echo $a . ' и ' . $b . ' не равны'; // 1 и 2 не равны

            echo "$a и $b не равны"; // 1 и 2 не равны

            echo '$a и $b не равны'; // $a и $b не равны
            ________________________________________________________________

            Приоритетно использовать двойные кавычки
         */